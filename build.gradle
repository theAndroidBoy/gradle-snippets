					// form command line call gradle or gradlew <task name>....this will execute task if present in build.gradle file

task("taskA")  //declaring a task named taskA also using method task and also using () and "" in this statement
				//one another way would have been project.task("taskA") as all the methods and properties are of project object
				
taskA.doLast({ //taskA is an obj, using its method doLast to add a clousure to the end of list of actions of taskA, also method like doLast take clousure as a parameter.
println "taskA executed"
	taskA.group "B+"
             }    
			)

taskA.description 'taskA description' //taskA is an obj ,setting its property named description to value 'taskA description'

///////////////////////////

task first

first.doFirst{						//not using () of doFirst method as gradle allows it
	println "first executed"
             }
////////////////////////////////////

task second 

second.doLast{
	println "second executed"
             }
//.........................................................................................................................

// passing configuration clousure method# 1 using () too
// task method can accept task name and optionaly a configuration clousure like below code

task third(
{									// this is a configuration clousure here we add value to properties and define clousures to be added actions list
description 'taskThird description'
doLast{
println "task third executed"
	  }
}
          )

/////////////////////////////////////////////////////////
// passing configuration clousure method# 2 not using ()

task forth{        // this "{" after taskname should be here if it is pushed to next line error will occur
description 'taskThird description'
doLast{
println "task third executed"
      }
          }

/////////////////////////////////////////////////////////

task fifth <<{	/// so <taskname> << is same as <taskname>.doLast{}...also its demeed to be depreciated
println "this is same as doLast()"
			 }
			 
//.........................................................................................................................			 
			 
					/////////dependencies/////
//as of now their are three types of dependencies in gradle
//////////////      dependsOn //////////////
// dependsOn is used if task A dependsOn on task B. in such cases task B is executed first ,followed by task A.
 
task putOnshocks{
doLast {
println "putting on Shocks"
}

}

task putOnshoes{
dependsOn 'putOnshocks'

doLast {
println "putting on Shoes"
}

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

								//////////// finalizedBy //////////////////
// finalizedBy is used in situation where task A's nature demand that task B should also be executed after task A.
	in such case task B is executed after task A.

task eatBreakFast {
finalizedBy 'brushTeeth'
doLast{
println 'Eating break fast'
}
}


task brushTeeth {
doLast{
println 'Brushing Teath'
}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

					/////////shouldRunAfter////////////////////////////////
// putOnFragrance is used in situation where if two tasks A and B are to be executed than the task with action property
	shouldRunAfter should be executed second.this property is valid only if both task are to be executed.
	

task putOnFragrance {
shouldRunAfter 'takeBath'
doLast{
println 'putting on Fragrance'
	  }
}

task takeBath {
doLast{
println 'Taking bath'
}
}

				
//.......................................................................................................................